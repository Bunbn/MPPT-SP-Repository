/*
  Incremental Conductance MPPT Controller
  Created: 4/21/2025
  By: Alex Aarnio

  V2 -> Battery
  V1 -> Solar Panel

  Using code adapted from:
    "Output Voltage Controller for Buck Converter"
    Created: 1/25/2023
    By: Elijah Gordon and Joshua Hutchinson

  IC algorithm based on:
    https://www.sciencedirect.com/science/article/pii/S1364032116305706
*/
#define SENSOR_I_WINDOW_MAX 128
#define SENSOR_V_WINDOW_MAX 128

#include <Arduino.h>
#include <AtverterH.h>

#define INTERRUPT_TIME 100000
#define DUTY_CYCLE_INCREMENT 1
#define VOLTAGE_ERROR_RANGE 10
#define CURRENT_ERROR_RANGE 10

#define DEBUG 1

AtverterH atverterH;
int ledState = HIGH;

// Variables for buck control
uint16_t dutyCycle;
int32_t desiredLowVoltage; // Target Output Voltage
int32_t actualHighVoltage; // Input Voltage
int32_t actualLowVoltage;  // Actual Output Voltage

// Safety Shutoff
bool VOLTAGE_SAFETY = 0; // Safety Shutoff Flag
uint16_t lowSideMaxVoltage = 23000;
// int lowSideMaxCurrent  = 3000;
// int highSideMaxCurrent = 3000;

// Variables for averaging
int32_t lowCurrent;
int32_t prevLowCurrent;
int32_t lowVoltage;
int32_t prevLowVoltage;

int32_t highCurrent;
int32_t highVoltage;

// Variables for IC algorithm
int32_t dV;
int32_t dI;

int32_t lowCurrentSum;
int32_t lowVoltageSum;

int32_t highCurrentSum;
int32_t highVoltageSum;

// Voltage sensor calibration
const double VL_scale = 1.03;
const double VL_offset = 36;
const double VH_scale = 1;
const double VH_offset = 0;

// Function prototypes
void setup();
void controlUpdate();
void transmitData();
// int32_t getCalibratedVH();
// int32_t getCalibratedVL();

void setup(void)
{
  actualHighVoltage = atverterH.getV1();

  atverterH.setupPinMode();            // set pins to input or output
  atverterH.initializeSensors();       // set filtered sensor values to initial reading
  atverterH.setCurrentShutdown1(3000); // set gate shutdown at 6A peak current
  atverterH.setCurrentShutdown2(3000); // set gate shutdown at 6A peak current
  atverterH.setThermalShutdown(60);    // set gate shutdown at 60Â°C temperature

  atverterH.initializeInterruptTimer(INTERRUPT_TIME, &controlUpdate); // Get interrupts enabled
  atverterH.startUART();                                              // send messages to computer via basic UART serial
  atverterH.applyHoldHigh2();                                         // hold side 2 high for a buck converter with side 1 input

  dutyCycle = 50;
  atverterH.startPWM(dutyCycle);
}

void loop(void)
{
}

void controlUpdate(void)
{

  // Perform voltage control
  // -----------------------------------------------------------------------------------------------------------------------------------
  // check for overvoltage
  if (atverterH.getV2() > lowSideMaxVoltage)
  {
    atverterH.shutdownGates(4);
    Serial.print("Low Side Overvoltage\n");
  }
  if (atverterH.isGateShutdown())
  {
    Serial.print("Safety Shutoff Triggered\n");
    Serial.print("Shutdown Code: ");
    Serial.print(atverterH.getShutdownCode());
    Serial.print("\n");
  }
  else
  {
    atverterH.updateVISensors();       // read voltage and current sensors and update moving average
    atverterH.checkCurrentShutdown();  // checks average current and shut down gates if necessary
    atverterH.checkBootstrapRefresh(); // refresh bootstrap capacitors on a timer

    // toggle LED to show control loop is running
    atverterH.setLED(LED1_PIN, ledState);
    ledState = !ledState;

    // Perform IC operations
    // -----------------------------------------------------------------------------------------------------------------------------------

    // calculate current averages
    lowCurrent = atverterH.getI2();
    lowVoltage = atverterH.getV2();

    highCurrent = atverterH.getI1();
    highVoltage = atverterH.getV1();

    dV = lowVoltage - prevLowVoltage;
    dI = lowCurrent - prevLowCurrent;

    if ((-VOLTAGE_ERROR_RANGE < dV) && (dV < VOLTAGE_ERROR_RANGE))
    {
#if DEBUG
      Serial.print("dV ~= 0\t");
#endif
      if (dI > CURRENT_ERROR_RANGE)
      {
#if DEBUG
        Serial.print("dI ~> 0\t");
#endif
        dutyCycle += DUTY_CYCLE_INCREMENT; // inc. duty cycle
      }
      else if (dI < -CURRENT_ERROR_RANGE)
      {
#if DEBUG
        Serial.print("dI ~< 0\t");
#endif
        dutyCycle += -DUTY_CYCLE_INCREMENT; // dec. duty cycle
      }
      else
      {
#if DEBUG
        Serial.print("dI ~= 0\t");
#endif
        dutyCycle += 0; // no change
      }
    }
    else
    {
#if DEBUG
      Serial.print("dV != 0\t");

      Serial.print("dI/dV = ");
      Serial.print((double)dI / dV);
      Serial.print("\t");

      Serial.print("avgI/avgV = ");
      Serial.print((double)-lowCurrent / lowVoltage);
      Serial.print("\t");
#endif

      if (((double)dI / dV > -((double)lowCurrent / lowVoltage + CURRENT_ERROR_RANGE / VOLTAGE_ERROR_RANGE)) && ((double)dI / dV > -((double)lowCurrent / lowVoltage - CURRENT_ERROR_RANGE / VOLTAGE_ERROR_RANGE)))
      {
#if DEBUG
        Serial.print("dI/dV ~> -avg\t");
#endif
        dutyCycle += DUTY_CYCLE_INCREMENT;
      }
      else if (((double)dI / dV < -((double)lowCurrent / lowVoltage + CURRENT_ERROR_RANGE / VOLTAGE_ERROR_RANGE)) && ((double)dI / dV < -((double)lowCurrent / lowVoltage - CURRENT_ERROR_RANGE / VOLTAGE_ERROR_RANGE)))
      {
#if DEBUG
        Serial.print("dI/dV ~< -avg\t");
#endif
        dutyCycle += -DUTY_CYCLE_INCREMENT;
      }
      else
      {
#if DEBUG
        Serial.print("dI/dV ~= -avg\t");
#endif
        dutyCycle += 0;
      }
    }
#if DEBUG
    Serial.print("\r\n");
#endif
    // save previous values for voltage/current
    prevLowCurrent = lowCurrent;
    prevLowVoltage = lowVoltage;

    atverterH.setDutyCycle(dutyCycle);

    transmitData(); // send relevent data over UART
    // Serial.print("Voltage Safety Triggered: ");
    // Serial.println(VOLTAGE_SAFETY);
  }
}

void transmitData()
{
  Serial.print("LowSideVoltage: ");
  Serial.print(lowVoltage);
  Serial.print("\t");

  Serial.print("LowSideCurrent: ");
  Serial.print(lowCurrent);
  Serial.print("\t");

  Serial.print("LowSidePower: ");
  Serial.print(lowVoltage * lowCurrent / 1000);
  Serial.print("\t");

  Serial.print("HighSideVoltage: ");
  Serial.print(highVoltage);
  Serial.print("\t");

  Serial.print("HighSideCurrent: ");
  Serial.print(highCurrent);
  Serial.print("\t");

  Serial.print("HighSidePower: ");
  Serial.print(highVoltage * highCurrent / 1000);
  Serial.print("\t");
  Serial.print("\r\n");

#if DEBUG
  Serial.print("DEBUG info: \t");

  Serial.print("DutyCycle: ");
  Serial.print(atverterH.getDutyCycle());
  Serial.print("\t");

  Serial.print("dV: ");
  Serial.print(dV);
  Serial.print("\t");

  Serial.print("dI: ");
  Serial.print(dI);
  Serial.print("\t");

  Serial.print("dV: ");
  Serial.print(dV);
  Serial.print("\r\n");
#endif
  Serial.println("-------------------------------------------------------------------------------------------------------");
}