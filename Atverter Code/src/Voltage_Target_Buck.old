/*
  Voltage-targeting Buck Converter
  Created: 4/21/2025
  By: Alex Aarnio

  Code adapted from:
    "Output Voltage Controller for Buck Converter"
    Created: 1/25/2023
    By: Elijah Gordon and Joshua Hutchinson
*/

#include <Arduino.h>
#include <AtverterE.h>

#define INTERRUPT_TIME 1

AtverterE atverterE;
int ledState = HIGH;

uint16_t dutyCycle;
int32_t desiredLowVoltage = 5000; // Target Output Voltage
int32_t actualHighVoltage; // Input Voltage
int32_t actualLowVoltage;  // Actual Output Voltage

// Control gain variables
const double kp = 0.3;  // Proportional Control: kp * error
const double ki = 0.0; // Integral Control: summation of (ki * error * sample_time)
const double kd = 0.0;  // Derivative Control:

// Voltage sensor calibration
const double VL_scale  = 0.93;
const double VL_offset = 0.25;
const double VH_scale  = 0.917;
const double VH_offset = 0.076;

double integralControl = 0.0;
int32_t prevVoltageError = 0;

// Function prototypes
void setup();
void controlUpdate();
void transmitData();
int32_t getCalibratedVH();
int32_t getCalibratedVL();

void setup(void)
{
  actualHighVoltage = getCalibratedVH();

  atverterE.setupPinMode();       // Get pins setup
  atverterE.initializePWMTimer(); // Setup Timers

  atverterE.initializeInterruptTimer(INTERRUPT_TIME, &controlUpdate); // Get interrupts enabled
  Serial.begin(9600);

  dutyCycle = (desiredLowVoltage * 1024) / actualHighVoltage;
  atverterE.setDutyCycle(dutyCycle);
  atverterE.startPWM();
}

void loop(void)
{
}

void controlUpdate(void)
{
  // Read voltage on low side and adjust based on calibration parameters
  actualLowVoltage = getCalibratedVL();

  int32_t voltageError = actualLowVoltage - desiredLowVoltage; // Instantaneous error of the desired output versus actual output voltage
  // Serial.print("Voltage Error: ");
  // Serial.print(voltageError);
  // Serial.print("\t");

  // Allows for us to convert from voltage error to dutycycle error
  // Negative sign used since boost converter is inversely proportional to dutycycle
  double proportionalControl = -(kp * ((double)voltageError / ((double)actualLowVoltage + 1))); // Proportional control: -kp * percent error, add 1 to prevent divide by 0
  // Serial.print("Proportional Control: ");
  // Serial.print(proportionalControl);
  // Serial.print("\t");

  integralControl += -(ki * ((double)voltageError / ((double)actualLowVoltage + 1))); // Integral control: -ki * (dutycycle) * percent error * sample_time, add 1 to prevent divide by 0
  // Serial.print("Integral Control: ");
  // Serial.print(integralControl);
  // Serial.print("\t");

  // double derivativeControl = (kd * ((double)(voltageError - prevVoltageError) / (double)INTERRUPT_TIME));  // Derivative control: -kd * (error - prev_error) / sample_time
  // derivativeControl = constrain(derivativeControl, -0.5, 0.5);
  //  Serial.print("Derivative Control: ");
  //  Serial.print(derivativeControl);
  //  Serial.print("\n\n");

  // prevVoltageError = voltageError;

  // Serial.print("Previous dutyCycle: ");
  // Serial.print(dutyCycle);
  // Serial.print("\n\n");
  dutyCycle += (double)dutyCycle * (proportionalControl + integralControl /* + derivativeControl*/);
  // Serial.print("New dutyCycle: ");
  // Serial.print(dutyCycle);
  // Serial.print("\t");

  dutyCycle = constrain(dutyCycle, 10, 1014);
  // Serial.print("Constrained new dutyCycle: ");
  // Serial.print(dutyCycle);
  // Serial.print("\t");

  atverterE.setDutyCycle(dutyCycle);

  transmitData(); // send relevent data over UART

  // toggle LED to show control loop is running
  atverterE.setLED(LED1G_PIN, ledState);
  ledState = !ledState;
}

void transmitData()
{
  Serial.print("DutyCycle: ");
  Serial.print(dutyCycle);
  Serial.print("\t");

  Serial.print("LowSideVoltage: ");
  Serial.print(getCalibratedVL());
  Serial.print("\t");

  Serial.print("LowSideCurrent = ");
  Serial.print(-atverterE.getIL());
  Serial.print("\t");

  Serial.print("HighSideVoltage: ");
  Serial.print(getCalibratedVH());
  Serial.print("\t");

  Serial.print("HighSideCurrent: ");
  Serial.print(atverterE.getIH());
  Serial.print("\t");

  Serial.print("\r\n");
}

int32_t getCalibratedVH()
{
  return (int32_t)(((double)atverterE.getActualVH() * VH_scale) + VH_offset);
}

int32_t getCalibratedVL()
{
  return (int32_t)(((double)atverterE.getActualVL() * VL_scale) + VL_offset);
}