/*
  Tool to help calibrate voltage sensors, reads voltages of high and low sides and sends values over UART
  Created: 4/21/2025
  By: Alex Aarnio

  Code adapted from:
    "Output Voltage Controller for Buck Converter"
    Created: 1/25/2023
    By: Elijah Gordon and Joshua Hutchinson
*/

#include <Arduino.h>
#include <AtverterE.h>

#define INTERRUPT_TIME 1

AtverterE atverterE;
int ledState = HIGH;

uint16_t dutyCycle;
int32_t actualHighVoltage; // Input Voltage
int32_t actualLowVoltage;  // Actual Output Voltage

// Voltage sensor calibration
const double VL_scale = 1;
const double VL_offset = 0;
const double VH_scale = 1;
const double VH_offset = 0;

double integralControl = 0.0;
int32_t prevVoltageError = 0;

// Function prototypes
void setup();
void controlUpdate();
void transmitData();
int32_t getCalibratedVH();
int32_t getCalibratedVL();

void setup(void)
{
  actualHighVoltage = getCalibratedVH();

  atverterE.setupPinMode();       // Get pins setup
  atverterE.initializePWMTimer(); // Setup Timers

  atverterE.initializeInterruptTimer(INTERRUPT_TIME, &controlUpdate); // Get interrupts enabled
  Serial.begin(9600);
}

void loop(void)
{
}

void controlUpdate(void)
{
  transmitData(); // send relevent data over UART

  // toggle LED to show control loop is running
  atverterE.setLED(LED1G_PIN, ledState);
  ledState = !ledState;
}

void transmitData()
{
  Serial.print("LowSideVoltage: ");
  Serial.print(getCalibratedVL());
  Serial.print("\t");

  // Serial.print("LowSideCurrent = ");
  // Serial.print(atverterE.getIL());
  // Serial.print("\n\t");

  Serial.print("HighSideVoltage: ");
  Serial.print(getCalibratedVH());
  Serial.print("\t");

  // Serial.print("HighSideCurrent = ");
  // Serial.print(atverterE.getIH());
  // Serial.print("\n\n");
  Serial.print("\r\n");
}

int32_t getCalibratedVH()
{
  return (int32_t)(((double)atverterE.getActualVH() * VH_scale) + VH_offset);
}

int32_t getCalibratedVL()
{
  return (int32_t)(((double)atverterE.getActualVL() * VL_scale) + VL_offset);
}